# Write a query that produces ranked or sorted data using Spark

#Global sorting and ranking
val orders = sc.textFile("/user/cloudera/sqoop_import/orders")
orders.map(rec => (rec.split(",")(0).toInt, rec)).sortByKey().collect().foreach(println)
orders.map(rec => (rec.split(",")(0).toInt, rec)).sortByKey(false).take(5).foreach(println)
orders.map(rec => (rec.split(",")(0).toInt, rec)).top(5).foreach(println)

orders.map(rec => (rec.split(",")(0).toInt, rec)).
  takeOrdered(5).
  foreach(println)

orders.map(rec => (rec.split(",")(0).toInt, rec)).
  takeOrdered(5)(Ordering[Int].reverse.on(x => x._1)).
  foreach(println)

orders.takeOrdered(5)(Ordering[Int].on(x => x.split(",")(0).toInt)).foreach(println)
orders.takeOrdered(5)(Ordering[Int].reverse.on(x => x.split(",")(0).toInt)).foreach(println)


val products = sc.textFile("/user/cloudera/sqoop_import/products")
val productsMap = products.map(rec => (rec.split(",")(1), rec))
val productsGroupBy = productsMap.groupByKey()
productsGroupBy.collect().foreach(println)

#Get data sorted by product price per category
#You can use map or flatMap, if you want to see one record per line you need to use flatMap
#Map will return the list
productsGroupBy.map(rec => (rec._2.toList.sortBy(k => k.split(",")(4).toFloat))).
  take(100).
  foreach(println)

productsGroupBy.map(rec => (rec._2.toList.sortBy(k => -k.split(",")(4).toFloat))).
  take(100).
  foreach(println)

productsGroupBy.flatMap(rec => (rec._2.toList.sortBy(k => -k.split(",")(4).toFloat))).
  take(100).
  foreach(println)

def getAll(rec: (String, Iterable[String])): Iterable[String] = {
  return rec._2
}
productsGroupBy.flatMap(x => getAll(x)).collect().foreach(println)

#To get topN products by price in each category
def getTopN(rec: (String, Iterable[String]), topN: Int): Iterable[String] = {
  val x: List[String] = rec._2.toList.sortBy(k => -k.split(",")(4).toFloat).take(topN)
  return x
}

val products = sc.textFile("/user/cloudera/sqoop_import/products")
val productsMap = products.map(rec => (rec.split(",")(1), rec))
productsMap.groupByKey().flatMap(x => getTopN(x, 2)).collect().foreach(println)

#To get topN priced products by category
def getTopDenseN(rec: (String, Iterable[String]), topN: Int): Iterable[String] = {
  var prodPrices: List[Float] = List()
  var topNPrices: List[Float] = List()
  var sortedRecs: List[String] = List()
  for(i <- rec._2) {
    prodPrices = prodPrices:+ i.split(",")(4).toFloat
  }
  topNPrices = prodPrices.distinct.sortBy(k => -k).take(topN)
  sortedRecs = rec._2.toList.sortBy(k => -k.split(",")(4).toFloat) 
  var x: List[String] = List()
  for(i <- sortedRecs) {
    if(topNPrices.contains(i.split(",")(4).toFloat))
      x = x:+ i 
  }
  return x
}

productsMap.groupByKey().flatMap(x => getTopDenseN(x, 2)).collect().foreach(println)

#Sorting using queries
#Global sorting and ranking
select * from products order by product_price desc;
select * from products order by product_price desc limit 10;

#By key sorting
#Using order by is not efficient, it serializes
select * from products order by product_category_id, product_price desc;

#Using distribute by sort by (to distribute sorting and scale it up)
select * from products distribute by product_category_id sort by product_price desc;

#By key ranking (in Hive we can use windowing/analytic functions)
select * from (select p.*, 
dense_rank() over (partition by product_category_id order by product_price desc) dr
from products p
distribute by product_category_id) q
where dr <= 2 order by product_category_id, dr;